import heapq

def heuristic(a, b): return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star(start, goal, grid):
    open_set = [(0, start)]
    came_from = {}
    g = {start: 0}
    while open_set:
        _, curr = heapq.heappop(open_set)
        if curr == goal:
            path = []
            while curr in came_from:
                path.append(curr)
                curr = came_from[curr]
            return path[::-1] + [goal]
        for dx, dy in [(0,1),(1,0),(0,-1),(-1,0)]:
            nx, ny = curr[0]+dx, curr[1]+dy
            next_node = (nx, ny)
            if 0<=nx<len(grid) and 0<=ny<len(grid[0]) and grid[nx][ny]==0:
                new_g = g[curr] + 1
                if new_g < g.get(next_node, float('inf')):
                    g[next_node] = new_g
                    f = new_g + heuristic(next_node, goal)
                    heapq.heappush(open_set, (f, next_node))
                    came_from[next_node] = curr
    return []

# ðŸ”¹ Test It
grid = [
    [0, 0, 0],
    [1, 1, 0],
    [0, 0, 0]
]
start = (0, 0)
goal = (2, 2)
print("Path:", a_star(start, goal, grid))
